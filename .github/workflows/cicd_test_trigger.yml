name: TeamsFx-CICD-Test Triggers

on:
  workflow_run:
    workflows: ["CD"]
    branches: ["main", "dev", "ga", "hotfix/**"]
    types: ["completed"]

jobs:
  TeamsFxCICDTestTriggers:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && !startsWith(github.event.workflow_run.head_branch, "hotfix") }}
    steps:
      - name: Trigger TeamsFx-CICD-Test
        run: |
          curl \
              -u :${{ secrets.TEAMSFX_BOT }} \
              -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/OfficeDev/TeamsFx-CICD-Test/actions/workflows/trigger_cicd_by_${{ github.event.workflow_run.head_branch }}.yml/dispatches \
              -d "{\"ref\":\"main\"}"

  DownloadAndOutput:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      pre_id: ${{ steps.preid.outputs.result }}
      server_version: ${{ steps.version.outputs.result }}
    steps:
      - name: Download artifact
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "release"
            })[0];
            let download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/release.zip`, Buffer.from(download.data));

      - name: Unzip artifact
        run: unzip release.zip

      - name: Get teamsfx-server version
        id: version
        uses: actions/github-script@v6
        with:
          script: |
            let rawData = require('fs').readFileSync('./versions.json', {encoding:'utf8', flag:'r'});
            let pkgs = JSON.parse(rawData);
            let server = pkgs.find(item => item.name === "@microsoft/teamsfx-server")
            console.log("==================", server.version)
            return server.version
      - run: npm install semver
      - name: Get teamsfx-server preid
        id: preid
        uses: actions/github-script@v6
        with:
          script: |
            let rawData = require('fs').readFileSync('./versions.json', {encoding:'utf8', flag:'r'});
            let pkgs = JSON.parse(rawData);
            let server = pkgs.find(item => item.name === "@microsoft/teamsfx-server")
            let semver = require('semver')
            if(semver.prerelease(server.version)) {
              console.log("===========", semver.prerelease(server.version)[0])
              return semver.prerelease(server.version)[0]
            } else {
              console.log("=========== stable")
              return "stable"
            }

  CallAzurePipeline:
    runs-on: ubuntu-latest
    needs: DownloadAndOutput
    steps:
      - name: Call Azure Pipeline
        if: ${{needs.downloadAndOutput.outputs.server_version}}
        uses: Azure/pipelines@v1.2
        with:
          azure-devops-project-url: https://devdiv.visualstudio.com/InternalTools
          azure-pipeline-name: TeamsFx-Dev17-CD
          azure-devops-token: ${{ secrets.VS_ADO_PAT }}
          azure-pipeline-variables: '{"PreId": ${{needs.downloadAndOutput.outputs.pre_id}}, "ServerVersion": ${{needs.downloadAndOutput.outputs.server_version}}}'
