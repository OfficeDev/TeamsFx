// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";

import * as dotenv from "dotenv";
import fs from "fs-extra";
import * as path from "path";
import * as os from "os";
import { TelemetryHelper } from "./utils/telemetry-helper";
import { TelemetryEvent } from "./constants";

export interface RemoteEnvs {
  teamsfxRemoteEnvs: { [key: string]: string };
  customizedRemoteEnvs: { [name: string]: string };
}

export const envFileName = (envName: string): string => `env.teamsfx.${envName}`;

export const EnvKeys = Object.freeze({
  FuncEndpoint: "REACT_APP_FUNC_ENDPOINT",
  FuncName: "REACT_APP_FUNC_NAME",
  RuntimeEndpoint: "REACT_APP_TEAMSFX_ENDPOINT",
  StartLoginPage: "REACT_APP_START_LOGIN_PAGE_URL",
  ClientID: "REACT_APP_CLIENT_ID",
});

export function initEnvs(): RemoteEnvs {
  const result: RemoteEnvs = {
    teamsfxRemoteEnvs: {},
    customizedRemoteEnvs: {},
  };

  return result;
}

export async function loadEnvFile(envName: string, folder: string): Promise<RemoteEnvs> {
  const envPath = path.join(folder, envFileName(envName));
  if (!(await fs.pathExists(envPath))) {
    return initEnvs();
  }
  const envs = dotenv.parse(await fs.readFile(envPath));
  const result = initEnvs();
  const entries = Object.entries(envs);
  for (const [key, value] of entries) {
    if (Object.values(EnvKeys).includes(key)) {
      result.teamsfxRemoteEnvs[key] = value;
    } else {
      result.customizedRemoteEnvs[key] = value;
    }
  }
  return result;
}

export async function saveEnvFile(
  envName: string,
  folder: string,
  envs: RemoteEnvs
): Promise<void> {
  try {
    const configs = await loadEnvFile(envName, folder);
    const newConfigs: RemoteEnvs = {
      teamsfxRemoteEnvs: { ...configs.teamsfxRemoteEnvs, ...envs.teamsfxRemoteEnvs },
      customizedRemoteEnvs: { ...configs.customizedRemoteEnvs, ...envs.customizedRemoteEnvs },
    };

    if (JSON.stringify(newConfigs) === JSON.stringify(configs)) {
      return;
    }

    const envPath = path.join(folder, envFileName(envName));
    await fs.ensureFile(envPath);

    const envString =
      `# Following variables are generated by TeamsFx${os.EOL}` +
      concatEnvString(envs.teamsfxRemoteEnvs) +
      `${os.EOL}# Following variables can be customized or you can add your owns${os.EOL}` +
      `# FOO=BAR${os.EOL}` +
      concatEnvString(envs.customizedRemoteEnvs);

    await fs.writeFile(envPath, envString);
  } catch (error) {
    // For now, it is ok if save env file failed.
    TelemetryHelper.sendErrorEvent(TelemetryEvent.SaveEnvFile, error);
  }
}

function concatEnvString(envs: { [key: string]: string }): string {
  let result = "";
  for (const [key, value] of Object.entries(envs)) {
    result += `${key}=${value}${os.EOL}`;
  }
  return result;
}
