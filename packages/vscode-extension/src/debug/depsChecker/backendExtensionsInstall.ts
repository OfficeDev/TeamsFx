// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

// NOTE:
// DO NOT EDIT this file in function plugin.
// The source of truth of this file is in packages/vscode-extension/src/debug/depsChecker.
// If you need to edit this file, please edit it in the above folder
// and run the scripts (tools/depsChecker/copyfiles.sh or tools/depsChecker/copyfiles.ps1 according to your OS)
// to copy you changes to function plugin.

import { logger, cpUtils } from "./checkerAdapter";
import { backendExtensionsInstallHelpLink } from "./common";
import { dotnetChecker } from "./dotnetChecker";
import { BackendExtensionsInstallError } from "./errors";

// NOTE: change these constants if function plugin scaffold changes
const defaultOutputPath = "bin";
const defaultCsprojPath = "extensions.csproj";

export async function backendExtensionsInstall(backendRoot: string, csprojPath: string = defaultCsprojPath, outputPath: string = defaultOutputPath): Promise<void> {
  if (!outputPath) {
    outputPath = defaultOutputPath;
  }

  const dotnetExecPath = await dotnetChecker.getDotnetExecPath();

  if (dotnetExecPath === "") {
    logger.error(`Failed to run backend extension install, .NET SDK executable not found`);
    throw new BackendExtensionsInstallError("Failed to run backend extension install, .NET SDK executable not found", backendExtensionsInstallHelpLink);
  }

  try {
    await cpUtils.executeCommand(
      backendRoot,
      logger,
      { shell: false },
      dotnetExecPath,
      "build",
      csprojPath,
      "-o",
      outputPath,
      "--ignore-failed-sources"
      );
  } catch (error) {
    logger.error(`Failed to run backend extension install: error = '${error}'`);
    throw new BackendExtensionsInstallError(`Failed to run backend extension install: error = '${error}'`, backendExtensionsInstallHelpLink);
  }
}
