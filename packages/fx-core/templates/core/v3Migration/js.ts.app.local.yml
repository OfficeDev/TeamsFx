version: 1.0.0

{{#config.registerApp}}
registerApp:
  {{#if aad}}
  - uses: aadApp/create # Creates a new AAD app to authenticate users if AAD_APP_CLIENT_ID environment variable is empty
    with:
      name: $\{{CONFIG__MANIFEST__APPNAME__SHORT}}-aad # Note: when you run configure/aadApp, the AAD app name will be updated based on the definition of manifest. If you don't want to change the name, ensure the name in AAD manifest is same with the name defined here.
      generateClientSecret: true # If the value is false, the action will not generate client secret for you
    # Output: following environment variable will be persisted in current environment's .env file.
    # AAD_APP_CLIENT_ID: the client id of AAD app
    # AAD_APP_CLIENT_SECRET: the client secret of AAD app
    # AAD_APP_OBJECT_ID: the object id of AAD app
    # AAD_APP_TENANT_ID: the tenant id of AAD app
    # AAD_APP_OAUTH_AUTHORITY_HOST: the host of OAUTH authority of AAD app
    # AAD_APP_OAUTH_AUTHORITY: the OAUTH authority of AAD app

  {{/if}}
  {{#if teamsApp}}
  - uses: teamsApp/create # Creates a Teams app
    with:
      name: $\{{CONFIG__MANIFEST__APPNAME__SHORT}} # Teams app name
    # Output: following environment variable will be persisted in current environment's .env file.
    # TEAMS_APP_ID: the id of Teams app
  {{/if}}

{{/config.registerApp}}
{{#config.provision}}
provision:
  {{#bot}}
  - uses: botAadApp/create # Creates a new AAD app for bot if BOT_ID environment variable is empty
    with:
      name: $\{{CONFIG__MANIFEST__APPNAME__SHORT}}-bot
    # Output: following environment variable will be persisted in current environment's .env file.
    # BOT_ID: the AAD app client id created for bot
    # SECRET_BOT_PASSWORD: the AAD app client secret created for bot

  - uses: botFramework/create # Create or update the bot registration on dev.botframework.com
    with:
      botId: $\{{BOT_ID}}
      name: $\{{CONFIG__MANIFEST__APPNAME__SHORT}}-bot
      messagingEndpoint: {{messagingEndpoint}}
      description: ""
      channels:
        - name: msteams
        {{#if isM365}}
        - name: m365extensions
        {{/if}}
  {{/bot}}

{{/config.provision}}
{{#config.configureApp}}
configureApp:
  {{#tab}}
  - uses: script # Set env for local launch
    name: Set {{../../placeholderMappings.tabDomain}} for local launch
    with:
      run: ::set-output {{../../placeholderMappings.tabDomain}}={{domain}}
  - uses: script # Set env for local launch
    name: Set {{../../placeholderMappings.tabEndpoint}} for local launch
    with:
      run: ::set-output {{../../placeholderMappings.tabEndpoint}}={{endpoint}}
  - uses: script # Set env for local launch
    name: Set {{../../placeholderMappings.tabIndexPath}} for local launch
    with:
      run: ::set-output {{../../placeholderMappings.tabIndexPath}}=/index.html#

  {{/tab}}
  {{#if aad}}
  - uses: aadApp/update # Apply the AAD manifest to an existing AAD app. Will use the object id in manifest file to determine which AAD app to update.
    with:
      manifestPath: ./aad.manifest.json # Relative path to this file. Environment variables in manifest will be replaced before apply to AAD app
      outputFilePath : ./build/aad.manifest.$\{{TEAMSFX_ENV}}.json
  # Output: following environment variable will be persisted in current environment's .env file.
  # AAD_APP_ACCESS_AS_USER_PERMISSION_ID: the id of access_as_user permission which is used to enable SSO

  {{/if}}
  {{#teamsApp}}
  {{#if appPackagePath}}
  - uses: teamsApp/update # # Apply the Teams app manifest to an existing Teams app. Will use the app id in manifest file to determine which Teams app to update.
    with:
      appPackagePath: {{appPackagePath}} # Relative path to this file. This is the path for built zip file.
    # Output: following environment variable will be persisted in current environment's .env file.
    # TEAMS_APP_ID: the id of Teams app
  {{else}}
  - uses: teamsApp/validateManifest # Validate using manifest schema
    with:
      manifestPath: ./appPackage/manifest.json # Path to manifest template

  - uses: teamsApp/zipAppPackage # Build Teams app package with latest env value
    with:
      manifestPath: ./appPackage/manifest.json # Path to manifest template
      outputZipPath: ./build/appPackage/appPackage.$\{{TEAMSFX_ENV}}.zip
      outputJsonPath: ./build/appPackage/manifest.$\{{TEAMSFX_ENV}}.json

  - uses: teamsApp/update # Apply the Teams app manifest to an existing Teams app in Teams Developer Portal. Will use the app id in manifest file to determine which Teams app to update.
    with:
      appPackagePath: ./build/appPackage/appPackage.$\{{TEAMSFX_ENV}}.zip # Relative path to this file. This is the path for built zip file.
    # Output: following environment variable will be persisted in current environment's .env file.
    # TEAMS_APP_ID: the id of Teams app
  {{/if}}
  {{/teamsApp}}

{{/config.configureApp}}
{{#config.deploy}}
deploy:
  {{#tools}}
  - uses: prerequisite/install # Install dependencies
    with:
      {{#devCert}}
      devCert:
        trust: {{trust}}
      {{/devCert}}
      {{#func}}
      func: true
      {{/func}}
      {{#dotnet}}
      dotnet: true
      {{/dotnet}}
    {{#if devCert}}
    # Output: following environment variable will be persisted in current environment's .env file.
    # SSL_CRT_FILE: certificate file
    # SSL_KEY_FILE: certificate key
    {{/if}}

  {{/tools}}
  {{#dotnetCommand}}
  - uses: cli/runDotnetCommand
    with:
      args: {{args}}
      workingDirectory: {{workingDirectory}}
      {{#if execPath}}
      execPath: {{execPath}}
      {{/if}}

  {{/dotnetCommand}}
  {{#tab}}
  - uses: file/createOrUpdateEnvironmentFile # Generate runtime environment variables
    with:
      target: ./tabs/.env.teamsfx.local
      envs:
        BROWSER: none
        HTTPS: true
        PORT: {{port}}
        SSL_CRT_FILE: $\{{SSL_CRT_FILE}}
        SSL_KEY_FILE: $\{{SSL_KEY_FILE}}

  {{/tab}}
  {{#if bot}}
  - uses: file/createOrUpdateEnvironmentFile # Generate runtime environment variables
    with:
      target: ./bot/.env.teamsfx.local
      envs:
        BOT_ID: $\{{BOT_ID}}
        BOT_PASSWORD: $\{{SECRET_BOT_PASSWORD}}

  {{/if}}
  {{#ssoTab}}
  - uses: file/createOrUpdateEnvironmentFile # Generate runtime environment variables
    with:
      target: ./tabs/.env.teamsfx.local
      envs:
        REACT_APP_START_LOGIN_PAGE_URL: $\{{ {{~../../placeholderMappings.tabEndpoint~}} }}/auth-start.html
        REACT_APP_CLIENT_ID: $\{{AAD_APP_CLIENT_ID}}
        {{#if functionName}}
        REACT_APP_FUNC_ENDPOINT: http://localhost:7071
        REACT_APP_FUNC_NAME: {{functionName}}
        {{/if}}

  {{/ssoTab}}
  {{#if ssoBot}}
  - uses: file/createOrUpdateEnvironmentFile # Generate runtime environment variables
    with:
      target: ./bot/.env.teamsfx.local
      envs:
        M365_CLIENT_ID: $\{{AAD_APP_CLIENT_ID}}
        M365_CLIENT_SECRET: $\{{SECRET_AAD_APP_CLIENT_SECRET}}
        M365_TENANT_ID: $\{{AAD_APP_TENANT_ID}}
        M365_AUTHORITY_HOST: $\{{AAD_APP_OAUTH_AUTHORITY_HOST}}
        INITIATE_LOGIN_ENDPOINT: $\{{ {{~../placeholderMappings.botEndpoint~}} }}/auth-start.html
        {{#if ssoTab}}
        M365_APPLICATION_ID_URI: api://$\{{ {{~../placeholderMappings.tabEndpoint~}} }}/botid-$\{{BOT_ID}}
        {{else}}
        M365_APPLICATION_ID_URI: api://botid-$\{{BOT_ID}}
        {{/if}}
        {{#if ssoFunction}}
        API_ENDPOINT: http://localhost:7071
        {{/if}}

  {{/if}}
  {{#if ssoFunction}}
  - uses: file/createOrUpdateEnvironmentFile # Generate runtime environment variables
    with:
      target: ./api/.env.teamsfx.local
      envs:
        M365_CLIENT_ID: $\{{AAD_APP_CLIENT_ID}}
        M365_CLIENT_SECRET: $\{{SECRET_AAD_APP_CLIENT_SECRET}}
        M365_TENANT_ID: $\{{AAD_APP_TENANT_ID}}
        M365_AUTHORITY_HOST: $\{{AAD_APP_OAUTH_AUTHORITY_HOST}}
        ALLOWED_APP_IDS: 1fec8e78-bce4-4aaf-ab1b-5451cc387264;5e3ce6c0-2b1f-4285-8d4b-75ee78787346;0ec893e0-5785-4de6-99da-4ed124e5296c;4345a7b9-9a63-4910-a426-35363201d503;4765445b-32c6-49b0-83e6-1d93765276ca;d3590ed6-52b3-4102-aeff-aad2292ab01c;00000002-0000-0ff1-ce00-000000000000;bc59ab01-8403-45c6-8796-ac3ef710b3e3

  {{/if}}
  {{#npmCommands}}
  - uses: cli/runNpmCommand # Run npm command
    with:
      args: {{args}}
      {{#if workingDirectory}}
      workingDirectory: {{workingDirectory}}
      {{/if}}

  {{/npmCommands}}
  {{#frontendStart}}
  - uses: file/createOrUpdateEnvironmentFile # Generate runtime environment variables
    with:
      target: ./tabs/.localSettings
      envs:
        BROWSER: none
        HTTPS: true
        PORT: 53000
        SSL_CRT_FILE: $\{{SSL_CRT_FILE}}
        SSL_KEY_FILE: $\{{SSL_KEY_FILE}}
        {{#if sso}}
        REACT_APP_CLIENT_ID: $\{{AAD_APP_CLIENT_ID}}
        REACT_APP_START_LOGIN_PAGE_URL: $\{{ {{~../../placeholderMappings.tabEndpoint~}} }}/auth-start.html
        REACT_APP_TEAMSFX_ENDPOINT: http://localhost:55000
        {{/if}}
        {{#if functionName}}
        REACT_APP_FUNC_ENDPOINT: http://localhost:7071
        REACT_APP_FUNC_NAME: {{functionName}}
        {{/if}}

  {{/frontendStart}}
  {{#authStart}}
  - uses: file/createOrUpdateJsonFile # Generate runtime environment variables
    with:
      target: {{appsettingsPath}}
      appsettings:
        CLIENT_ID: $\{{AAD_APP_CLIENT_ID}}
        CLIENT_SECRET: $\{{SECRET_AAD_APP_CLIENT_SECRET}}
        IDENTIFIER_URI: api://$\{{ {{~../../placeholderMappings.tabDomain~}} }}/$\{{AAD_APP_CLIENT_ID}}
        AAD_METADATA_ADDRESS: $\{{AAD_APP_OAUTH_AUTHORITY}}/v2.0/.well-known/openid-configuration
        OAUTH_AUTHORITY: $\{{AAD_APP_OAUTH_AUTHORITY}}
        TAB_APP_ENDPOINT: $\{{ {{~../../placeholderMappings.tabEndpoint~}} }}
        ALLOWED_APP_IDS: 1fec8e78-bce4-4aaf-ab1b-5451cc387264;5e3ce6c0-2b1f-4285-8d4b-75ee78787346;0ec893e0-5785-4de6-99da-4ed124e5296c;4345a7b9-9a63-4910-a426-35363201d503;4765445b-32c6-49b0-83e6-1d93765276ca;d3590ed6-52b3-4102-aeff-aad2292ab01c;00000002-0000-0ff1-ce00-000000000000;bc59ab01-8403-45c6-8796-ac3ef710b3e3
        URLS: http://localhost:55000

  {{/authStart}}
  {{#botStart}}
  - uses: file/createOrUpdateEnvironmentFile # Generate runtime environment variables
    with:
      target: ./bot/.localSettings
      envs:
        BOT_ID: $\{{BOT_ID}}
        BOT_PASSWORD: $\{{SECRET_BOT_PASSWORD}}
        {{#if sso}}
        M365_CLIENT_ID: $\{{AAD_APP_CLIENT_ID}}
        M365_CLIENT_SECRET: $\{{SECRET_AAD_APP_CLIENT_SECRET}}
        M365_TENANT_ID: $\{{AAD_APP_TENANT_ID}}
        M365_AUTHORITY_HOST: $\{{AAD_APP_OAUTH_AUTHORITY_HOST}}
        INITIATE_LOGIN_ENDPOINT: $\{{ {{~../../placeholderMappings.botEndpoint~}} }}/auth-start.html
        {{#if tab}}
        M365_APPLICATION_ID_URI: api://$\{{ {{~../../placeholderMappings.tabDomain~}} }}/botid-$\{{BOT_ID}}
        {{else}}
        M365_APPLICATION_ID_URI: api://botid-$\{{BOT_ID}}
        {{/if}}
        {{/if}}
        {{#if function}}
        API_ENDPOINT: http://localhost:7071
        {{/if}}

  {{/botStart}}
  {{#if backendStart}}
  - uses: file/createOrUpdateEnvironmentFile # Generate runtime environment variables
    with:
      target: ./api/.localSettings
      envs:
        FUNCTIONS_WORKER_RUNTIME: node
        M365_CLIENT_ID: $\{{AAD_APP_CLIENT_ID}}
        M365_CLIENT_SECRET: $\{{SECRET_AAD_APP_CLIENT_SECRET}}
        M365_TENANT_ID: $\{{AAD_APP_TENANT_ID}}
        M365_AUTHORITY_HOST: $\{{AAD_APP_OAUTH_AUTHORITY_HOST}}
        ALLOWED_APP_IDS: 1fec8e78-bce4-4aaf-ab1b-5451cc387264;5e3ce6c0-2b1f-4285-8d4b-75ee78787346;0ec893e0-5785-4de6-99da-4ed124e5296c;4345a7b9-9a63-4910-a426-35363201d503;4765445b-32c6-49b0-83e6-1d93765276ca;d3590ed6-52b3-4102-aeff-aad2292ab01c;00000002-0000-0ff1-ce00-000000000000;bc59ab01-8403-45c6-8796-ac3ef710b3e3

  {{/if}}
{{/config.deploy}}