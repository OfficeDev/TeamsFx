// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";

import {
  AutoGeneratedReadme,
  Bicep,
  CallServiceEffect,
  CloudResource,
  Component,
  ConfigurationBicep,
  ContextV3,
  err,
  FileEffect,
  FxError,
  Inputs,
  InputsWithProjectPath,
  Json,
  ok,
  Platform,
  ProjectSettingsV3,
  ProvisionBicep,
  Result,
  TelemetryReporter,
  UserError,
  UserInteraction,
  v3,
} from "@microsoft/teamsfx-api";
import fs from "fs-extra";
import { assign, cloneDeep } from "lodash";
import os from "os";
import * as path from "path";
import { Container } from "typedi";
import { format } from "util";
import * as uuid from "uuid";
import { getLocalizedString } from "../common/localizeUtils";
import { isVSProject } from "../common/projectSettingsHelper";
import { hasBot, hasSPFxTab, hasTab } from "../common/projectSettingsHelperV3";
import { convertToAlphanumericOnly, getProjectTemplatesFolderPath } from "../common/utils";
import { LocalCrypto } from "../core/crypto";
import { environmentManager } from "../core/environment";
import { TOOLS } from "../core/globalVars";
import { getTemplatesFolder } from "../folder";
import {
  SolutionTelemetryComponentName,
  SolutionTelemetryProperty,
  BuiltInFeaturePluginNames,
} from "./constants";
import { ComponentNames, ProgrammingLanguage, Scenarios, scenarioToComponent } from "./constants";
import { DriverContext } from "./driver/interface/commonArgs";
import { DefaultManifestProvider } from "./resource/appManifest/manifestProvider";
import { getComponent, getComponentByScenario } from "./workflow";

export async function persistProvisionBicep(
  projectPath: string,
  provisionBicep: ProvisionBicep
): Promise<Result<any, FxError>> {
  const templateRoot = await getProjectTemplatesFolderPath(projectPath);
  const templateFolder = path.join(templateRoot, "azure");
  if (provisionBicep.Modules) {
    for (const module of Object.keys(provisionBicep.Modules)) {
      const value = provisionBicep.Modules[module];
      if (value) {
        const filePath = path.join(templateFolder, "provision", `${module}.bicep`);
        await fs.appendFile(filePath, value.replace(/\r?\n/g, os.EOL).trim());
      }
    }
  }
  if (provisionBicep.Orchestration) {
    const filePath = path.join(templateFolder, "provision.bicep");
    await fs.appendFile(
      filePath,
      os.EOL + os.EOL + provisionBicep.Orchestration.trim().replace(/\r?\n/g, os.EOL)
    );
  }
  return ok(undefined);
}

export async function persistConfigBicep(
  projectPath: string,
  configBicep: ConfigurationBicep
): Promise<Result<any, FxError>> {
  const templateRoot = await getProjectTemplatesFolderPath(projectPath);
  const templateFolder = path.join(templateRoot, "azure");
  if (configBicep.Modules) {
    for (const module of Object.keys(configBicep.Modules)) {
      const value = configBicep.Modules[module];
      if (value) {
        const filePath = path.join(templateFolder, "teamsFx", `${module}.bicep`);
        fs.outputFileSync(filePath, value.replace(/\r?\n/g, os.EOL).trim(), { encoding: "utf-8" });
      }
    }
  }
  if (configBicep.Orchestration) {
    const filePath = path.join(templateFolder, "config.bicep");
    fs.appendFileSync(
      filePath,
      os.EOL + os.EOL + configBicep.Orchestration.trim().replace(/\r?\n/g, os.EOL)
    );
  }
  return ok(undefined);
}

export async function readParametersJson(
  projectPath: string,
  env: string
): Promise<Json | undefined> {
  const parameterEnvFolderPath = path.join(projectPath, ".fx", "configs");
  const parameterFileName = `azure.parameters.${env}.json`;
  const parameterEnvFilePath = path.join(parameterEnvFolderPath, parameterFileName);
  if (await fs.pathExists(parameterEnvFilePath)) {
    const json = await fs.readJson(parameterEnvFilePath);
    return json;
  }
  return undefined;
}

export async function writeParametersJson(
  projectPath: string,
  env: string,
  json: Json
): Promise<void> {
  const parameterEnvFolderPath = path.join(projectPath, ".fx", "configs");
  const parameterFileName = `azure.parameters.${env}.json`;
  const parameterEnvFilePath = path.join(parameterEnvFolderPath, parameterFileName);
  let parameterFileContent = JSON.stringify(json, undefined, 2);
  parameterFileContent = parameterFileContent.replace(/\r?\n/g, os.EOL);
  await fs.writeFile(parameterEnvFilePath, parameterFileContent);
}

export async function persistParams(
  projectPath: string,
  appName: string,
  params?: Record<string, string>
): Promise<Result<any, FxError>> {
  const envListResult = await environmentManager.listRemoteEnvConfigs(projectPath);
  if (envListResult.isErr()) {
    return err(envListResult.error);
  }
  const parameterEnvFolderPath = path.join(projectPath, ".fx", "configs");
  await fs.ensureDir(parameterEnvFolderPath);
  for (const env of envListResult.value) {
    let json = await readParametersJson(projectPath, env);
    if (json) {
      json.parameters = json.parameters || {};
      json.parameters.provisionParameters = json.parameters.provisionParameters || {};
      json.parameters.provisionParameters.value = json.parameters.provisionParameters.value || {};
      const existingParams = json.parameters.provisionParameters.value;
      Object.assign(existingParams, params);
      if (!existingParams.resourceBaseName) {
        existingParams.resourceBaseName = generateResourceBaseName(appName, "");
      }
      json.parameters.provisionParameters.value = existingParams;
    } else {
      params = params || {};
      if (!params.resourceBaseName) {
        params.resourceBaseName = generateResourceBaseName(appName, "");
      }
      json = {
        $schema:
          "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
        contentVersion: "1.0.0.0",
        parameters: { provisionParameters: { value: params } },
      };
    }
    await writeParametersJson(projectPath, env, json);
  }
  return ok(undefined);
}

export class BicepUtils {
  async persistBiceps(
    projectPath: string,
    appName: string,
    biceps: Bicep[]
  ): Promise<Result<any, FxError>> {
    for (const bicep of biceps) {
      const res = await persistBicep(projectPath, appName, bicep);
      if (res.isErr()) return res;
    }
    return ok(undefined);
  }
}

export const bicepUtils = new BicepUtils();

export async function persistBicep(
  projectPath: string,
  appName: string,
  bicep: Bicep
): Promise<Result<any, FxError>> {
  if (bicep.Provision) {
    const res = await persistProvisionBicep(projectPath, bicep.Provision);
    if (res.isErr()) return err(res.error);
  }
  if (bicep.Configuration) {
    const res = await persistConfigBicep(projectPath, bicep.Configuration);
    if (res.isErr()) return err(res.error);
  }
  // if (bicep.Parameters) {
  const res = await persistParams(projectPath, appName, bicep.Parameters);
  if (res.isErr()) return err(res.error);
  // }
  return ok(undefined);
}

export function newProjectSettingsV3(): ProjectSettingsV3 {
  const projectSettings: ProjectSettingsV3 = {
    appName: "test",
    projectId: uuid.v4(),
    version: "2.1.0",
    components: [],
  };
  return projectSettings;
}

export function createContextV3(projectSettings?: ProjectSettingsV3): ContextV3 {
  if (!projectSettings) projectSettings = newProjectSettingsV3();
  const context: ContextV3 = {
    userInteraction: TOOLS.ui,
    logProvider: TOOLS.logProvider,
    telemetryReporter: TOOLS.telemetryReporter!,
    cryptoProvider: new LocalCrypto(projectSettings?.projectId),
    permissionRequestProvider: TOOLS.permissionRequest,
    projectSetting: projectSettings,
    manifestProvider: new DefaultManifestProvider(),
    tokenProvider: TOOLS.tokenProvider,
  };
  return context;
}
export function createDriverContext(inputs: Inputs): DriverContext {
  const driverContext: DriverContext = {
    azureAccountProvider: TOOLS.tokenProvider!.azureAccountProvider,
    m365TokenProvider: TOOLS.tokenProvider!.m365TokenProvider,
    ui: TOOLS.ui,
    progressBar: undefined,
    logProvider: TOOLS.logProvider,
    telemetryReporter: TOOLS.telemetryReporter!,
    projectPath: inputs.projectPath!,
    platform: inputs.platform,
  };
  return driverContext;
}
export function normalizeName(appName: string): string {
  const normalizedAppName = appName.replace(/[^a-zA-Z0-9]/g, "").toLowerCase();
  return normalizedAppName;
}

export function generateResourceBaseName(appName: string, envName: string): string {
  const maxAppNameLength = 10;
  const maxEnvNameLength = 4;
  const normalizedAppName = appName.replace(/[^a-zA-Z0-9]/g, "").toLowerCase();
  const normalizedEnvName = envName.replace(/[^a-zA-Z0-9]/g, "").toLowerCase();
  return (
    normalizedAppName.substr(0, maxAppNameLength) +
    normalizedEnvName.substr(0, maxEnvNameLength) +
    uuid.v4().substr(0, 6)
  );
}

export function isInComponentConnection(component: Component, item: string): boolean {
  if (component.connections?.includes(item)) {
    return true;
  }
  return false;
}

export function isLocalEnv(context: ContextV3): boolean {
  return context.envInfo?.envName === "local";
}

export async function generateConfigBiceps(
  context: ContextV3,
  inputs: InputsWithProjectPath
): Promise<Result<undefined, FxError>> {
  ensureComponentConnections(context.projectSetting);
  for (const config of context.projectSetting.components) {
    if (
      config.name === ComponentNames.AzureWebApp ||
      config.name === ComponentNames.Function ||
      config.name === ComponentNames.APIM
    ) {
      const scenario = config.scenario;
      const clonedInputs = cloneDeep(inputs);
      assign(clonedInputs, {
        componentId: config.name === ComponentNames.APIM ? "" : scenarioToComponent.get(scenario),
        scenario: config.name === ComponentNames.APIM ? "" : scenario,
      });
      const component = Container.get<CloudResource>(config.name + "-config");
      const res = await component.generateBicep!(context, clonedInputs);
      if (res.isErr()) return err(res.error);
      const persistRes = await bicepUtils.persistBiceps(
        inputs.projectPath,
        convertToAlphanumericOnly(context.projectSetting.appName!),
        res.value
      );
      if (persistRes.isErr()) return persistRes;
    }
  }
  return ok(undefined);
}

export const ComponentConnections = {
  [ComponentNames.AzureWebApp]: [
    ComponentNames.Identity,
    ComponentNames.AzureSQL,
    ComponentNames.KeyVault,
    ComponentNames.AadApp,
    ComponentNames.TeamsTab,
    ComponentNames.TeamsBot,
    ComponentNames.TeamsApi,
  ],
  [ComponentNames.Function]: [
    ComponentNames.Identity,
    ComponentNames.AzureSQL,
    ComponentNames.KeyVault,
    ComponentNames.AadApp,
    ComponentNames.TeamsTab,
    ComponentNames.TeamsBot,
    ComponentNames.TeamsApi,
  ],
  [ComponentNames.APIM]: [ComponentNames.TeamsTab, ComponentNames.TeamsBot],
};

export function ensureComponentConnections(settingsV3: ProjectSettingsV3): void {
  const exists = (c: string) => getComponent(settingsV3, c) !== undefined;
  const existingConfigNames = Object.keys(ComponentConnections).filter(exists);
  for (const configName of existingConfigNames) {
    const existingResources = (ComponentConnections[configName] as string[]).filter(exists);
    const configs = settingsV3.components.filter((c) => c.name === configName);
    for (const config of configs) {
      config.connections = cloneDeep(existingResources);
    }
  }
  if (
    getComponent(settingsV3, ComponentNames.TeamsApi) &&
    getComponent(settingsV3, ComponentNames.APIM)
  ) {
    const functionConfig = getComponentByScenario(
      settingsV3,
      ComponentNames.Function,
      Scenarios.Api
    );
    functionConfig?.connections?.push(ComponentNames.APIM);
  }
}

// clear resources related info in envInfo so that we could provision successfully using new M365 tenant.
export function resetEnvInfoWhenSwitchM365(envInfo: v3.EnvInfoV3): void {
  const keysToClear = [
    BuiltInFeaturePluginNames.appStudio,
    BuiltInFeaturePluginNames.aad,
    ComponentNames.AppManifest,
    ComponentNames.AadApp,
  ];

  const apimKeys = [BuiltInFeaturePluginNames.apim, ComponentNames.APIM];
  const botKeys = [BuiltInFeaturePluginNames.bot, ComponentNames.TeamsBot];
  const keys = Object.keys(envInfo.state);

  for (const key of keys) {
    if (keysToClear.includes(key)) {
      delete envInfo.state[key];
    }
    if (apimKeys.includes(key)) {
      delete envInfo.state[key]["apimClientAADObjectId"];
      delete envInfo.state[key]["apimClientAADClientId"];
      delete envInfo.state[key]["apimClientAADClientSecret"];
    }

    if (botKeys.includes(key)) {
      delete envInfo.state[key]["resourceId"];
      delete envInfo.state[key]["botId"];
      delete envInfo.state[key]["botPassword"];
      delete envInfo.state[key]["objectId"];
    }
  }
}

export function addFeatureNotify(
  inputs: Inputs,
  ui: UserInteraction,
  type: "Capability" | "Resource",
  features: string[]
) {
  const addNames = features.map((c) => `'${c}'`).join(" and ");
  const single = features.length === 1;
  const template =
    inputs.platform === Platform.CLI
      ? single
        ? type === "Capability"
          ? getLocalizedString("core.addCapability.addCapabilityNoticeForCli")
          : getLocalizedString("core.addResource.addResourceNoticeForCli")
        : type === "Capability"
        ? getLocalizedString("core.addCapability.addCapabilitiesNoticeForCli")
        : getLocalizedString("core.addResource.addResourcesNoticeForCli")
      : single
      ? type === "Capability"
        ? getLocalizedString("core.addCapability.addCapabilityNotice")
        : getLocalizedString("core.addResource.addResourceNotice")
      : type === "Capability"
      ? getLocalizedString("core.addCapability.addCapabilitiesNotice")
      : getLocalizedString("core.addResource.addResourcesNotice");
  const msg = format(template, addNames);
  ui.showMessage("info", msg, false);
}

export function isCSharpProject(programmingLanguage: string | undefined) {
  return programmingLanguage === ProgrammingLanguage.CSharp;
}

export async function scaffoldRootReadme(
  projectSettings: ProjectSettingsV3,
  projectPath: string
): Promise<void> {
  if (!isVSProject(projectSettings)) {
    const bot = hasBot(projectSettings);
    const tab = hasTab(projectSettings);
    const spfxTab = hasSPFxTab(projectSettings);

    let sourcePath = "";
    if (tab && bot) {
      sourcePath = path.join(getTemplatesFolder(), "plugins", "solution", "README.md");
    } else if (spfxTab) {
      sourcePath = path.join(
        getTemplatesFolder(),
        "plugins",
        "resource",
        "SPFx",
        "solution",
        "rootREADME.md"
      );
    }
    const targetPath = path.join(projectPath, AutoGeneratedReadme);
    if ((await fs.pathExists(sourcePath)) && !(await fs.pathExists(targetPath))) {
      await fs.copy(sourcePath, targetPath);
    }
  }
}

export function sendErrorTelemetryThenReturnError(
  eventName: string,
  error: FxError,
  reporter?: TelemetryReporter,
  properties?: { [p: string]: string },
  measurements?: { [p: string]: number },
  errorProps?: string[]
): FxError {
  if (!properties) {
    properties = {};
  }

  if (SolutionTelemetryProperty.Component in properties === false) {
    properties[SolutionTelemetryProperty.Component] = SolutionTelemetryComponentName;
  }

  properties[SolutionTelemetryProperty.Success] = "no";
  if (error instanceof UserError) {
    properties["error-type"] = "user";
  } else {
    properties["error-type"] = "system";
  }

  properties["error-code"] = `${error.source}.${error.name}`;
  properties["error-message"] = error.message;

  reporter?.sendTelemetryErrorEvent(eventName, properties, measurements, errorProps);
  return error;
}
